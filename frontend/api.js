import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';

// ƒê·ªãa ch·ªâ backend API
const API_URL = 'http://192.168.0.102:4000/api';

// Bi·∫øn l∆∞u token trong b·ªô nh·ªõ t·∫°m (RAM)
let accessToken = null;
let refreshToken = null;

/**
 * üì• Load token t·ª´ AsyncStorage khi app kh·ªüi ƒë·ªông
 */
export async function loadTokensFromStorage() {
  accessToken = await AsyncStorage.getItem('accessToken');
  refreshToken = await AsyncStorage.getItem('refreshToken');
}

/**
 * üíæ L∆∞u token v√†o AsyncStorage + bi·∫øn t·∫°m
 */
export async function saveTokens(a, r) {
  accessToken = a;
  refreshToken = r;
  await AsyncStorage.setItem('accessToken', a);
  await AsyncStorage.setItem('refreshToken', r);
}

/**
 * üóëÔ∏è X√≥a token kh·ªèi AsyncStorage + bi·∫øn t·∫°m
 */
export async function clearTokens() {
  accessToken = null;
  refreshToken = null;
  await AsyncStorage.removeItem('accessToken');
  await AsyncStorage.removeItem('refreshToken');
}

/**
 * üöÄ T·∫°o instance Axios
 */
const api = axios.create({
  baseURL: API_URL,
  timeout: 5000,
});

/**
 * üîë Request Interceptor
 * - T·ª± ƒë·ªông g·∫Øn Access Token v√†o header Authorization tr∆∞·ªõc khi g·ª≠i request
 */
api.interceptors.request.use(async (config) => {
  if (!accessToken) {
    accessToken = await AsyncStorage.getItem('accessToken');
  }
  if (accessToken) {
    config.headers.Authorization = `Bearer ${accessToken}`;
  }
  return config;
});

/**
 * ‚ôªÔ∏è Response Interceptor
 * - N·∫øu g·∫∑p l·ªói 401 (token h·∫øt h·∫°n) ‚Üí th·ª≠ refresh token
 */
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // N·∫øu l·ªói 401 v√† request ch∆∞a th·ª≠ l·∫°i l·∫ßn n√†o
    if (error.response && error.response.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      // L·∫•y refresh token
      const rt = refreshToken || (await AsyncStorage.getItem('refreshToken'));
      if (!rt) {
        await clearTokens();
        return Promise.reject(error);
      }

      try {
        // G·ªçi API refresh token
        const r = await axios.post(`${API_URL}/refresh`, { refreshToken: rt });
        const newAccess = r.data.accessToken;

        // L∆∞u l·∫°i access token m·ªõi
        accessToken = newAccess;
        await AsyncStorage.setItem('accessToken', newAccess);

        // G·ª≠i l·∫°i request c≈© v·ªõi token m·ªõi
        originalRequest.headers.Authorization = `Bearer ${newAccess}`;
        return axios(originalRequest);
      } catch (e) {
        // Refresh th·∫•t b·∫°i ‚Üí clear token, bu·ªôc user login l·∫°i
        await clearTokens();
        return Promise.reject(error);
      }
    }

    return Promise.reject(error);
  }
);

export default api;
